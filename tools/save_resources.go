package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
)

type resource struct {
	path, name string
}

func main() {
	resources := []resource{
		resource{
			path: "assets/animation/hero.png",
			name: "Hero_png",
		},
		resource{
			path: "assets/tilesets/tiles.png",
			name: "Tiles_png",
		},
		resource{
			path: "assets/tilesets/tileset.tsx",
			name: "Tileset_tsx",
		},
		resource{
			path: "assets/tilesets/world-1.tmx",
			name: "World_1_tmx",
		},
	}

	f, err := os.Create("assets/assets.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "// This file is generated by save_resources.go")
	fmt.Fprintln(f, "package assets")
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "import \"log\"")
	fmt.Fprintln(f, "")

	for _, r := range resources {
		content, err := ioutil.ReadFile(r.path)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Fprintf(f, "var %s    = []byte(%q)\n", r.name, string(content))
	}
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "var Lookup = map[string]([]byte){")
	for _, r := range resources {
		fmt.Fprintf(f, "%q:    %s,\n", r.path, r.name)
		absPath, err := filepath.Abs(r.path)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Fprintf(f, "%q:    %s,\n", absPath, r.name)
	}
	fmt.Fprintln(f, "}")
	fmt.Fprint(f, `
// Throws a log fatal if path doesn't exist
func LookupFatal(path string) []byte {
	if _, ok := Lookup[path]; !ok {
		log.Fatalf("no such resource %s", path)
	}
	return Lookup[path]
}
	`)
}
